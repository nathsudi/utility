name: CI - Lint and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint-bash:
    name: Lint Bash Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
      
      - name: Run shellcheck on bash scripts
        run: |
          echo "Checking bash scripts..."
          find scripts/bash -type f -name "*.sh" -exec shellcheck {} \; || true
          find examples -type f -name "*.sh" -exec shellcheck {} \; || true
          echo "Bash script check completed"

  lint-python:
    name: Lint Python Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint
      
      - name: Run flake8 on Python scripts
        run: |
          echo "Checking Python scripts with flake8..."
          find scripts/python -type f -name "*.py" -exec flake8 --max-line-length=120 --ignore=E501,W503 {} + || true
          find examples -type f -name "*.py" -exec flake8 --max-line-length=120 --ignore=E501,W503 {} + || true
          echo "Python flake8 check completed"

  lint-javascript:
    name: Lint JavaScript Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Check JavaScript syntax
        run: |
          echo "Checking JavaScript files..."
          find scripts/javascript -type f -name "*.js" -exec node --check {} \; || true
          find examples -type f -name "*.js" -exec node --check {} \; || true
          echo "JavaScript syntax check completed"

  test-scripts:
    name: Test Scripts
    runs-on: ubuntu-latest
    needs: [lint-bash, lint-python, lint-javascript]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install test dependencies
        run: |
          # Install Python test dependencies if requirements exist
          if [ -f "tests/requirements.txt" ]; then
            pip install -r tests/requirements.txt
          fi
          pip install pytest || true
          
          # Install Node test dependencies if package.json exists
          if [ -f "tests/package.json" ]; then
            cd tests && npm install && cd ..
          fi
      
      - name: Run tests
        run: |
          echo "Running available tests..."
          
          # Run Python tests if they exist
          if [ -d "tests/python" ] && command -v pytest &> /dev/null; then
            echo "Running Python tests..."
            pytest tests/python/ -v || echo "Python tests completed with issues"
          fi
          
          # Run JavaScript tests if they exist
          if [ -d "tests/javascript" ] && [ -f "tests/package.json" ]; then
            echo "Running JavaScript tests..."
            cd tests && npm test || echo "JavaScript tests completed with issues"
          fi
          
          echo "Test execution completed"

  validate-structure:
    name: Validate Repository Structure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check repository structure
        run: |
          echo "Validating repository structure..."
          
          # Check for required directories
          for dir in scripts docs tests examples; do
            if [ ! -d "$dir" ]; then
              echo "ERROR: Required directory '$dir' not found"
              exit 1
            fi
          done
          
          # Check for README files in script categories
          for category in bash python javascript automation system network data misc; do
            if [ ! -f "scripts/$category/README.md" ]; then
              echo "WARNING: README.md not found in scripts/$category/"
            fi
          done
          
          echo "Structure validation completed"
